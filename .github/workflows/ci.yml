name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]
  schedule:
    - cron: "0 2 * * 1" # Weekly security scan on Mondays at 2 AM UTC

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  # Setup and install dependencies once
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.x

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate cache key
        id: cache-key
        run: echo "value=${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
            node_modules/.cache
            ~/.pnpm-store
          key: ${{ steps.cache-key.outputs.value }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

  # Code quality checks
  quality-checks:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup environment
        uses: ./.github/actions/setup

      - name: Run ESLint
        run: pnpm lint

      - name: Run Prettier check
        run: pnpm format:check

      - name: TypeScript type checking
        run: pnpm exec tsc --noEmit

  # Build verification
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup environment
        uses: ./.github/actions/setup

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production

  # Security checks
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup environment
        uses: ./.github/actions/setup

      - name: Run security audit
        run: pnpm audit --audit-level=moderate || echo "::warning::Security audit found issues"

      - name: Check for hardcoded secrets
        run: |
          echo "Checking for potential hardcoded secrets..."
          if grep -r --include="*.{ts,tsx,js,jsx}" -E '(password|secret|token|key)\s*=\s*["\047][^\s]{8,}["\047]' --exclude-dir=node_modules .; then
            echo "::warning::Potential hardcoded secrets found. Please review."
          else
            echo "No hardcoded secrets found."
          fi

  # PR-specific tasks
  pr-tasks:
    name: PR Management
    runs-on: ubuntu-latest
    needs: [setup, quality-checks, build, security]
    if: github.event_name == 'pull_request' && github.event.pull_request.draft == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Check for changes in specific directories
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            api:
              - 'src/app/api/**'
            components:
              - 'src/components/**'
            models:
              - 'src/models/**'
            auth:
              - 'src/app/api/(auth)/**'
            email:
              - 'src/mail-templates/**'

      - name: Auto-assign size labels
        uses: actions/github-script@v8
        continue-on-error: true
        with:
          script: |
            try {
              const { data: files } = await github.rest.pulls.listFiles({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
              });

              const changes = files.reduce((sum, file) => sum + file.additions + file.deletions, 0);
              let sizeLabel = '';
              
              if (changes < 100) sizeLabel = 'size/small';
              else if (changes < 500) sizeLabel = 'size/medium';
              else if (changes < 1000) sizeLabel = 'size/large';
              else sizeLabel = 'size/xl';

              console.log(`PR size: ${changes} lines changed, applying label: ${sizeLabel}`);

              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: [sizeLabel]
              });
              
              console.log(`Successfully added label: ${sizeLabel}`);
            } catch (error) {
              console.log(`Failed to add size label: ${error.message}`);
            }

      - name: Auto-assign change-based labels
        uses: actions/github-script@v8
        continue-on-error: true
        with:
          script: |
            try {
              const labels = [];
              const apiChanged = '${{ steps.changes.outputs.api }}' === 'true';
              const componentsChanged = '${{ steps.changes.outputs.components }}' === 'true';
              const modelsChanged = '${{ steps.changes.outputs.models }}' === 'true';
              const authChanged = '${{ steps.changes.outputs.auth }}' === 'true';
              const emailChanged = '${{ steps.changes.outputs.email }}' === 'true';

              if (apiChanged) labels.push('api');
              if (componentsChanged) labels.push('frontend');
              if (modelsChanged) labels.push('database');
              if (authChanged) labels.push('authentication');
              if (emailChanged) labels.push('email');

              if (labels.length > 0) {
                console.log(`Adding labels: ${labels.join(', ')}`);
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  labels: labels
                });
                console.log(`Successfully added labels: ${labels.join(', ')}`);
              }
            } catch (error) {
              console.log(`Failed to add labels: ${error.message}`);
            }

  # Dependency review for PRs
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    needs: setup
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup environment
        uses: ./.github/actions/setup

      - name: Check for new vulnerabilities
        run: |
          echo "Checking for dependency vulnerabilities..."
          if pnpm audit --json > audit-results.json 2>/dev/null; then
            echo "PASS: No vulnerabilities found in dependencies"
          else
            echo "WARNING: Vulnerabilities detected. Running detailed audit..."
            pnpm audit || true
            
            HIGH_COUNT=$(cat audit-results.json 2>/dev/null | jq '.metadata.vulnerabilities.high // 0' || echo "0")
            CRITICAL_COUNT=$(cat audit-results.json 2>/dev/null | jq '.metadata.vulnerabilities.critical // 0' || echo "0")
            
            echo "Critical vulnerabilities: $CRITICAL_COUNT"
            echo "High vulnerabilities: $HIGH_COUNT"
            
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "FAIL: Critical vulnerabilities found. Please fix before merging."
              exit 1
            elif [ "$HIGH_COUNT" -gt 0 ]; then
              echo "WARNING: High severity vulnerabilities found. Consider fixing these."
            fi
          fi

      - name: Check for dependency changes
        run: |
          echo "Checking for dependency changes in this PR..."
          git fetch origin ${{ github.base_ref }}

          if git diff origin/${{ github.base_ref }}...HEAD --name-only | grep -E "(package\.json|pnpm-lock\.yaml)"; then
            echo "INFO: Dependencies were modified in this PR:"
            git diff origin/${{ github.base_ref }}...HEAD --name-only | grep -E "(package\.json|pnpm-lock\.yaml)" || true
            echo ""
            echo "Package.json changes:"
            git diff origin/${{ github.base_ref }}...HEAD -- package.json || echo "No package.json changes"
            echo ""
            echo "WARNING: Please ensure all new dependencies are necessary and from trusted sources."
          else
            echo "PASS: No dependency changes detected in this PR"
          fi
